{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\axm\\\\Documents\\\\GitHub\\\\Home-Page\\\\src\\\\components\\\\WeatherWidget.jsx\",\n  _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from 'react';\nimport './WeatherWidget.css';\nimport { IoMdSunny, IoMdCloudy, IoMdRainy, IoMdSnow, IoMdThunderstorm, IoMdPartlySunny, IoMdMoon } from 'react-icons/io';\nimport { WiWind } from 'react-icons/wi'; // Вместо IoMdWind используем WiWind\n\n/**\r\n * Возвращает класс погоды (для фона) и иконку (для отображения) на основе описания.\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction getWeatherCondition(description) {\n  if (!description) {\n    return {\n      bgClass: 'default-bg',\n      Icon: IoMdPartlySunny\n    };\n  }\n  const lowerDesc = description.toLowerCase();\n  if (lowerDesc.includes('clear')) {\n    return {\n      bgClass: 'sunny-bg',\n      Icon: IoMdSunny\n    };\n  }\n  if (lowerDesc.includes('cloud')) {\n    return {\n      bgClass: 'cloudy-bg',\n      Icon: IoMdCloudy\n    };\n  }\n  if (lowerDesc.includes('rain') || lowerDesc.includes('drizzle')) {\n    return {\n      bgClass: 'rainy-bg',\n      Icon: IoMdRainy\n    };\n  }\n  if (lowerDesc.includes('snow')) {\n    return {\n      bgClass: 'snowy-bg',\n      Icon: IoMdSnow\n    };\n  }\n  if (lowerDesc.includes('thunder')) {\n    return {\n      bgClass: 'thunder-bg',\n      Icon: IoMdThunderstorm\n    };\n  }\n  // Вместо IoMdWind используем WiWind\n  if (lowerDesc.includes('wind') || lowerDesc.includes('breeze')) {\n    return {\n      bgClass: 'windy-bg',\n      Icon: WiWind\n    };\n  }\n  if (lowerDesc.includes('night') || lowerDesc.includes('moon')) {\n    return {\n      bgClass: 'night-bg',\n      Icon: IoMdMoon\n    };\n  }\n  return {\n    bgClass: 'default-bg',\n    Icon: IoMdPartlySunny\n  };\n}\nfunction WeatherWidget({\n  theme\n}) {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [cityInput, setCityInput] = useState('');\n\n  // Если у вас нет .env, замените на реальный ключ\n  const API_KEY = process.env.REACT_APP_OWM_KEY || 'YOUR_OPENWEATHERMAP_API_KEY';\n  useEffect(() => {\n    const storedCity = localStorage.getItem('weatherCity') || '';\n    setCityInput(storedCity);\n    if (!navigator.geolocation) {\n      setLoading(false);\n      if (storedCity) {\n        fetchWeatherByCity(storedCity);\n      }\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      fetchWeatherByCoords(latitude, longitude);\n    }, () => {\n      setLoading(false);\n      if (storedCity) {\n        fetchWeatherByCity(storedCity);\n      }\n    });\n  }, []);\n  const fetchWeatherByCoords = async (lat, lon) => {\n    try {\n      setLoading(true);\n      const currentRes = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`);\n      if (!currentRes.ok) throw new Error('Не удалось получить погоду');\n      const currentData = await currentRes.json();\n      setWeather({\n        temp: Math.round(currentData.main.temp),\n        description: currentData.weather[0].description,\n        name: currentData.name\n      });\n      const forecastRes = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`);\n      if (!forecastRes.ok) throw new Error('Не удалось получить прогноз');\n      const forecastData = await forecastRes.json();\n      const processed = processForecastData(forecastData.list);\n      setForecast(processed);\n    } catch (err) {\n      alert(err.message);\n      setWeather(null);\n      setForecast([]);\n    }\n    setLoading(false);\n  };\n  const fetchWeatherByCity = async cityName => {\n    try {\n      setLoading(true);\n      const currentRes = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(cityName)}&units=metric&lang=ru&appid=${API_KEY}`);\n      if (!currentRes.ok) throw new Error('Город не найден');\n      const currentData = await currentRes.json();\n      setWeather({\n        temp: Math.round(currentData.main.temp),\n        description: currentData.weather[0].description,\n        name: currentData.name\n      });\n      const forecastRes = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(cityName)}&units=metric&lang=ru&appid=${API_KEY}`);\n      if (!forecastRes.ok) throw new Error('Не удалось получить прогноз');\n      const forecastData = await forecastRes.json();\n      const processed = processForecastData(forecastData.list);\n      setForecast(processed);\n    } catch (error) {\n      alert(error.message);\n      setWeather(null);\n      setForecast([]);\n    }\n    setLoading(false);\n  };\n  const processForecastData = list => {\n    const dayMap = {};\n    list.forEach(item => {\n      const dateTxt = item.dt_txt.split(' ')[0];\n      const temp = item.main.temp;\n      if (!dayMap[dateTxt]) {\n        dayMap[dateTxt] = {\n          min: temp,\n          max: temp\n        };\n      } else {\n        if (temp < dayMap[dateTxt].min) dayMap[dateTxt].min = temp;\n        if (temp > dayMap[dateTxt].max) dayMap[dateTxt].max = temp;\n      }\n    });\n    const entries = Object.keys(dayMap).map(date => ({\n      date,\n      min: Math.round(dayMap[date].min),\n      max: Math.round(dayMap[date].max)\n    }));\n    entries.sort((a, b) => a.date > b.date ? 1 : -1);\n    return entries.slice(0, 4);\n  };\n  const handleWidgetClick = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const handleCitySubmit = e => {\n    e.preventDefault();\n    if (cityInput.trim()) {\n      localStorage.setItem('weatherCity', cityInput.trim());\n      fetchWeatherByCity(cityInput.trim());\n    }\n  };\n\n  // Определяем класс и иконку (функция getWeatherCondition выше)\n  let weatherClass = 'default-bg';\n  let WeatherIcon = IoMdPartlySunny;\n  if (!loading && weather) {\n    const {\n      bgClass,\n      Icon\n    } = getWeatherCondition(weather.description);\n    weatherClass = bgClass;\n    WeatherIcon = Icon;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `weather-widget widget ${weatherClass}`,\n      onClick: handleWidgetClick,\n      children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043F\\u043E\\u0433\\u043E\\u0434\\u044B...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this), !loading && weather && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-city\",\n          children: weather.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-temp\",\n          children: [weather.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-big-icon\",\n          children: /*#__PURE__*/_jsxDEV(WeatherIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), !loading && !weather && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u041F\\u043E\\u0433\\u043E\\u0434\\u0430 \\u043D\\u0435\\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `weather-modal-overlay ${theme === 'dark' ? 'dark-overlay' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"weather-modal-close\",\n          onClick: closeModal,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"weather-modal-title\",\n          children: \"\\u041F\\u041E\\u0413\\u041E\\u0414\\u0410\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-today\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wt-city\",\n            children: weather.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wt-temp\",\n            children: [weather.temp, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wt-desc\",\n            children: weather.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"weather-city-form\",\n          onSubmit: handleCitySubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434...\",\n            value: cityInput,\n            onChange: e => setCityInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"OK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), forecast && forecast.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-forecast\",\n          children: forecast.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-forecast-day\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wf-dayName\",\n              children: new Date(day.date).toLocaleDateString('ru-RU', {\n                weekday: 'short',\n                day: 'numeric',\n                month: 'numeric'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wf-temps\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"wf-min\",\n                children: [day.min, \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 23\n              }, this), \" - \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"wf-max\",\n                children: [day.max, \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 69\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 21\n            }, this)]\n          }, day.date, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041D\\u0435\\u0442 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u043F\\u043E \\u043F\\u0440\\u043E\\u0433\\u043D\\u043E\\u0437\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(WeatherWidget, \"IiSDy1obGq/oDIzxCadRwUBDsMo=\");\n_c = WeatherWidget;\nexport default WeatherWidget;\nvar _c;\n$RefreshReg$(_c, \"WeatherWidget\");","map":{"version":3,"names":["React","useState","useEffect","IoMdSunny","IoMdCloudy","IoMdRainy","IoMdSnow","IoMdThunderstorm","IoMdPartlySunny","IoMdMoon","WiWind","jsxDEV","_jsxDEV","Fragment","_Fragment","getWeatherCondition","description","bgClass","Icon","lowerDesc","toLowerCase","includes","WeatherWidget","theme","_s","weather","setWeather","forecast","setForecast","loading","setLoading","isModalOpen","setIsModalOpen","cityInput","setCityInput","API_KEY","process","env","REACT_APP_OWM_KEY","storedCity","localStorage","getItem","navigator","geolocation","fetchWeatherByCity","getCurrentPosition","position","latitude","longitude","coords","fetchWeatherByCoords","lat","lon","currentRes","fetch","ok","Error","currentData","json","temp","Math","round","main","name","forecastRes","forecastData","processed","processForecastData","list","err","alert","message","cityName","encodeURIComponent","error","dayMap","forEach","item","dateTxt","dt_txt","split","min","max","entries","Object","keys","map","date","sort","a","b","slice","handleWidgetClick","closeModal","handleCitySubmit","e","preventDefault","trim","setItem","weatherClass","WeatherIcon","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","length","day","Date","toLocaleDateString","weekday","month","_c","$RefreshReg$"],"sources":["C:/Users/axm/Documents/GitHub/Home-Page/src/components/WeatherWidget.jsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react';\r\nimport './WeatherWidget.css';\r\nimport {\r\n  IoMdSunny,\r\n  IoMdCloudy,\r\n  IoMdRainy,\r\n  IoMdSnow,\r\n  IoMdThunderstorm,\r\n  IoMdPartlySunny,\r\n  IoMdMoon\r\n} from 'react-icons/io';\r\nimport { WiWind } from 'react-icons/wi'; // Вместо IoMdWind используем WiWind\r\n\r\n/**\r\n * Возвращает класс погоды (для фона) и иконку (для отображения) на основе описания.\r\n */\r\nfunction getWeatherCondition(description) {\r\n  if (!description) {\r\n    return { bgClass: 'default-bg', Icon: IoMdPartlySunny };\r\n  }\r\n\r\n  const lowerDesc = description.toLowerCase();\r\n\r\n  if (lowerDesc.includes('clear')) {\r\n    return { bgClass: 'sunny-bg', Icon: IoMdSunny };\r\n  }\r\n  if (lowerDesc.includes('cloud')) {\r\n    return { bgClass: 'cloudy-bg', Icon: IoMdCloudy };\r\n  }\r\n  if (lowerDesc.includes('rain') || lowerDesc.includes('drizzle')) {\r\n    return { bgClass: 'rainy-bg', Icon: IoMdRainy };\r\n  }\r\n  if (lowerDesc.includes('snow')) {\r\n    return { bgClass: 'snowy-bg', Icon: IoMdSnow };\r\n  }\r\n  if (lowerDesc.includes('thunder')) {\r\n    return { bgClass: 'thunder-bg', Icon: IoMdThunderstorm };\r\n  }\r\n  // Вместо IoMdWind используем WiWind\r\n  if (lowerDesc.includes('wind') || lowerDesc.includes('breeze')) {\r\n    return { bgClass: 'windy-bg', Icon: WiWind };\r\n  }\r\n  if (lowerDesc.includes('night') || lowerDesc.includes('moon')) {\r\n    return { bgClass: 'night-bg', Icon: IoMdMoon };\r\n  }\r\n\r\n  return { bgClass: 'default-bg', Icon: IoMdPartlySunny };\r\n}\r\n\r\nfunction WeatherWidget({ theme }) {\r\n  const [weather, setWeather] = useState(null);\r\n  const [forecast, setForecast] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [cityInput, setCityInput] = useState('');\r\n\r\n  // Если у вас нет .env, замените на реальный ключ\r\n  const API_KEY = process.env.REACT_APP_OWM_KEY || 'YOUR_OPENWEATHERMAP_API_KEY';\r\n\r\n  useEffect(() => {\r\n    const storedCity = localStorage.getItem('weatherCity') || '';\r\n    setCityInput(storedCity);\r\n\r\n    if (!navigator.geolocation) {\r\n      setLoading(false);\r\n      if (storedCity) {\r\n        fetchWeatherByCity(storedCity);\r\n      }\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        fetchWeatherByCoords(latitude, longitude);\r\n      },\r\n      () => {\r\n        setLoading(false);\r\n        if (storedCity) {\r\n          fetchWeatherByCity(storedCity);\r\n        }\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const fetchWeatherByCoords = async (lat, lon) => {\r\n    try {\r\n      setLoading(true);\r\n      const currentRes = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`\r\n      );\r\n      if (!currentRes.ok) throw new Error('Не удалось получить погоду');\r\n      const currentData = await currentRes.json();\r\n      setWeather({\r\n        temp: Math.round(currentData.main.temp),\r\n        description: currentData.weather[0].description,\r\n        name: currentData.name\r\n      });\r\n\r\n      const forecastRes = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`\r\n      );\r\n      if (!forecastRes.ok) throw new Error('Не удалось получить прогноз');\r\n      const forecastData = await forecastRes.json();\r\n      const processed = processForecastData(forecastData.list);\r\n      setForecast(processed);\r\n    } catch (err) {\r\n      alert(err.message);\r\n      setWeather(null);\r\n      setForecast([]);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchWeatherByCity = async (cityName) => {\r\n    try {\r\n      setLoading(true);\r\n      const currentRes = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(\r\n          cityName\r\n        )}&units=metric&lang=ru&appid=${API_KEY}`\r\n      );\r\n      if (!currentRes.ok) throw new Error('Город не найден');\r\n      const currentData = await currentRes.json();\r\n      setWeather({\r\n        temp: Math.round(currentData.main.temp),\r\n        description: currentData.weather[0].description,\r\n        name: currentData.name\r\n      });\r\n\r\n      const forecastRes = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(\r\n          cityName\r\n        )}&units=metric&lang=ru&appid=${API_KEY}`\r\n      );\r\n      if (!forecastRes.ok) throw new Error('Не удалось получить прогноз');\r\n      const forecastData = await forecastRes.json();\r\n      const processed = processForecastData(forecastData.list);\r\n      setForecast(processed);\r\n    } catch (error) {\r\n      alert(error.message);\r\n      setWeather(null);\r\n      setForecast([]);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const processForecastData = (list) => {\r\n    const dayMap = {};\r\n    list.forEach((item) => {\r\n      const dateTxt = item.dt_txt.split(' ')[0];\r\n      const temp = item.main.temp;\r\n      if (!dayMap[dateTxt]) {\r\n        dayMap[dateTxt] = { min: temp, max: temp };\r\n      } else {\r\n        if (temp < dayMap[dateTxt].min) dayMap[dateTxt].min = temp;\r\n        if (temp > dayMap[dateTxt].max) dayMap[dateTxt].max = temp;\r\n      }\r\n    });\r\n\r\n    const entries = Object.keys(dayMap).map((date) => ({\r\n      date,\r\n      min: Math.round(dayMap[date].min),\r\n      max: Math.round(dayMap[date].max)\r\n    }));\r\n    entries.sort((a, b) => (a.date > b.date ? 1 : -1));\r\n\r\n    return entries.slice(0, 4);\r\n  };\r\n\r\n  const handleWidgetClick = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleCitySubmit = (e) => {\r\n    e.preventDefault();\r\n    if (cityInput.trim()) {\r\n      localStorage.setItem('weatherCity', cityInput.trim());\r\n      fetchWeatherByCity(cityInput.trim());\r\n    }\r\n  };\r\n\r\n  // Определяем класс и иконку (функция getWeatherCondition выше)\r\n  let weatherClass = 'default-bg';\r\n  let WeatherIcon = IoMdPartlySunny;\r\n  if (!loading && weather) {\r\n    const { bgClass, Icon } = getWeatherCondition(weather.description);\r\n    weatherClass = bgClass;\r\n    WeatherIcon = Icon;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={`weather-widget widget ${weatherClass}`} onClick={handleWidgetClick}>\r\n        {loading && <p>Загрузка погоды...</p>}\r\n\r\n        {!loading && weather && (\r\n          <>\r\n            <div className=\"weather-city\">{weather.name}</div>\r\n            <div className=\"weather-temp\">{weather.temp}°C</div>\r\n            {/* Большая иконка */}\r\n            <div className=\"weather-big-icon\">\r\n              <WeatherIcon />\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {!loading && !weather && <p>Погода недоступна</p>}\r\n      </div>\r\n\r\n      {isModalOpen && (\r\n        <div\r\n          className={`weather-modal-overlay ${\r\n            theme === 'dark' ? 'dark-overlay' : ''\r\n          }`}\r\n        >\r\n          <div className=\"weather-modal-content\">\r\n            <button className=\"weather-modal-close\" onClick={closeModal}>\r\n              ×\r\n            </button>\r\n            <h2 className=\"weather-modal-title\">ПОГОДА</h2>\r\n\r\n            {weather && (\r\n              <div className=\"weather-today\">\r\n                <div className=\"wt-city\">{weather.name}</div>\r\n                <div className=\"wt-temp\">{weather.temp}°C</div>\r\n                <div className=\"wt-desc\">{weather.description}</div>\r\n              </div>\r\n            )}\r\n\r\n            <form className=\"weather-city-form\" onSubmit={handleCitySubmit}>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Введите город...\"\r\n                value={cityInput}\r\n                onChange={(e) => setCityInput(e.target.value)}\r\n              />\r\n              <button type=\"submit\">OK</button>\r\n            </form>\r\n\r\n            <hr />\r\n            {forecast && forecast.length > 0 ? (\r\n              <div className=\"weather-forecast\">\r\n                {forecast.map((day) => (\r\n                  <div key={day.date} className=\"weather-forecast-day\">\r\n                    <div className=\"wf-dayName\">\r\n                      {new Date(day.date).toLocaleDateString('ru-RU', {\r\n                        weekday: 'short',\r\n                        day: 'numeric',\r\n                        month: 'numeric'\r\n                      })}\r\n                    </div>\r\n                    <div className=\"wf-temps\">\r\n                      <span className=\"wf-min\">{day.min}°C</span> - <span className=\"wf-max\">{day.max}°C</span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <p>Нет данных по прогнозу</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WeatherWidget;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
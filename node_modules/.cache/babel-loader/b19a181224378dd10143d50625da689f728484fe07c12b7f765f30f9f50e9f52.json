{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\axm\\\\Documents\\\\GitHub\\\\Home-Page\\\\src\\\\components\\\\WeatherWidget.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './WeatherWidget.css';\nimport { IoMdSunny, IoMdCloudy, IoMdRainy, IoMdSnow, IoMdThunderstorm, IoMdPartlySunny, IoMdMoon } from 'react-icons/io';\nimport { WiWindy } from 'react-icons/wi';\n\n/**\r\n * Возвращает иконку (для большой иконки) на основе описания погоды.\r\n * Фон теперь решается отдельно (день или ночь).\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction getWeatherIcon(description) {\n  if (!description) return IoMdPartlySunny;\n  const lowerDesc = description.toLowerCase();\n  if (lowerDesc.includes('clear')) {\n    return IoMdSunny;\n  }\n  if (lowerDesc.includes('cloud')) {\n    return IoMdCloudy;\n  }\n  if (lowerDesc.includes('rain') || lowerDesc.includes('drizzle')) {\n    return IoMdRainy;\n  }\n  if (lowerDesc.includes('snow')) {\n    return IoMdSnow;\n  }\n  if (lowerDesc.includes('thunder')) {\n    return IoMdThunderstorm;\n  }\n  if (lowerDesc.includes('wind') || lowerDesc.includes('breeze')) {\n    return WiWindy;\n  }\n  if (lowerDesc.includes('night') || lowerDesc.includes('moon')) {\n    return IoMdMoon;\n  }\n  return IoMdPartlySunny;\n}\n\n/**\r\n * Определяем, день или ночь, исходя из sys.sunrise / sys.sunset и timezone.\r\n * Возвращаем true, если день, иначе false (ночь).\r\n */\nfunction isDayTime(weather) {\n  if (!weather || !weather.sys) return true; // fallback\n  const {\n    sunrise,\n    sunset\n  } = weather.sys;\n  // sunrise, sunset в секундах (UNIX time, UTC)\n  // timezone в секундах от UTC (может быть + или -)\n  const tz = weather.timezone || 0; // тоже в секундах\n  // Текущее UTC-время (в секундах)\n  const nowUTC = Math.floor(Date.now() / 1000);\n  // Локальное время в городе\n  const localTime = nowUTC + tz;\n  // Если localTime между sunrise и sunset => день, иначе ночь\n  if (sunrise && sunset && sunrise < localTime && localTime < sunset) {\n    return true; // день\n  }\n  return false;\n}\nfunction WeatherWidget({\n  theme\n}) {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [cityInput, setCityInput] = useState('');\n\n  // Вставьте реальный ключ или используйте .env\n  const API_KEY = process.env.REACT_APP_OWM_KEY || 'YOUR_OPENWEATHERMAP_API_KEY';\n  useEffect(() => {\n    const storedCity = localStorage.getItem('weatherCity') || '';\n    setCityInput(storedCity);\n    if (!navigator.geolocation) {\n      setLoading(false);\n      if (storedCity) {\n        fetchWeatherByCity(storedCity);\n      }\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      fetchWeatherByCoords(latitude, longitude);\n    }, () => {\n      setLoading(false);\n      if (storedCity) {\n        fetchWeatherByCity(storedCity);\n      }\n    });\n  }, []);\n  const fetchWeatherByCoords = async (lat, lon) => {\n    try {\n      setLoading(true);\n      const currentRes = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`);\n      if (!currentRes.ok) throw new Error('Не удалось получить погоду');\n      const currentData = await currentRes.json();\n      setWeather({\n        temp: Math.round(currentData.main.temp),\n        description: currentData.weather[0].description,\n        name: currentData.name,\n        sys: currentData.sys,\n        // sunrise, sunset\n        timezone: currentData.timezone // смещение\n      });\n      const forecastRes = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`);\n      if (!forecastRes.ok) throw new Error('Не удалось получить прогноз');\n      const forecastData = await forecastRes.json();\n      const processed = processForecastData(forecastData.list);\n      setForecast(processed);\n    } catch (err) {\n      alert(err.message);\n      setWeather(null);\n      setForecast([]);\n    }\n    setLoading(false);\n  };\n  const fetchWeatherByCity = async cityName => {\n    try {\n      setLoading(true);\n      const currentRes = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(cityName)}&units=metric&lang=ru&appid=${API_KEY}`);\n      if (!currentRes.ok) throw new Error('Город не найден');\n      const currentData = await currentRes.json();\n      setWeather({\n        temp: Math.round(currentData.main.temp),\n        description: currentData.weather[0].description,\n        name: currentData.name,\n        sys: currentData.sys,\n        timezone: currentData.timezone\n      });\n      const forecastRes = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(cityName)}&units=metric&lang=ru&appid=${API_KEY}`);\n      if (!forecastRes.ok) throw new Error('Не удалось получить прогноз');\n      const forecastData = await forecastRes.json();\n      const processed = processForecastData(forecastData.list);\n      setForecast(processed);\n    } catch (error) {\n      alert(error.message);\n      setWeather(null);\n      setForecast([]);\n    }\n    setLoading(false);\n  };\n  const processForecastData = list => {\n    const dayMap = {};\n    list.forEach(item => {\n      const dateTxt = item.dt_txt.split(' ')[0];\n      const temp = item.main.temp;\n      if (!dayMap[dateTxt]) {\n        dayMap[dateTxt] = {\n          min: temp,\n          max: temp\n        };\n      } else {\n        if (temp < dayMap[dateTxt].min) dayMap[dateTxt].min = temp;\n        if (temp > dayMap[dateTxt].max) dayMap[dateTxt].max = temp;\n      }\n    });\n    const entries = Object.keys(dayMap).map(date => ({\n      date,\n      min: Math.round(dayMap[date].min),\n      max: Math.round(dayMap[date].max)\n    }));\n    entries.sort((a, b) => a.date > b.date ? 1 : -1);\n    return entries.slice(0, 4);\n  };\n  const handleWidgetClick = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const handleCitySubmit = e => {\n    e.preventDefault();\n    if (cityInput.trim()) {\n      localStorage.setItem('weatherCity', cityInput.trim());\n      fetchWeatherByCity(cityInput.trim());\n    }\n  };\n\n  // Если не загрузилось — оставим дефолт\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-widget widget default-bg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043F\\u043E\\u0433\\u043E\\u0434\\u044B...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this);\n  }\n  if (!weather) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-widget widget default-bg\",\n        onClick: handleWidgetClick,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041F\\u043E\\u0433\\u043E\\u0434\\u0430 \\u043D\\u0435\\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `weather-modal-overlay ${theme === 'dark' ? 'dark-overlay' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"weather-modal-close\",\n            onClick: closeModal,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"weather-modal-title\",\n            children: \"\\u041F\\u041E\\u0413\\u041E\\u0414\\u0410\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\u041D\\u0435\\u0442 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"weather-city-form\",\n            onSubmit: handleCitySubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434...\",\n              value: cityInput,\n              onChange: e => setCityInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"OK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n  // Определяем, день или ночь\n  const dayTime = isDayTime(weather); // true => день, false => ночь\n\n  // Выберем фоновый класс\n  const widgetClass = dayTime ? 'sunny-bg' : 'night-bg';\n\n  // Определяем иконку по описанию\n  const WeatherIcon = getWeatherIcon(weather.description);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `weather-widget widget ${widgetClass}`,\n      onClick: handleWidgetClick,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-city\",\n        children: weather.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-temp\",\n        children: [weather.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-big-icon\",\n        children: /*#__PURE__*/_jsxDEV(WeatherIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `weather-modal-overlay ${theme === 'dark' ? 'dark-overlay' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `weather-modal-content ${dayTime ? 'sunny-bg' : 'night-bg'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"weather-modal-close\",\n          onClick: closeModal,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"weather-modal-title\",\n          children: \"\\u041F\\u041E\\u0413\\u041E\\u0414\\u0410\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-today\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wt-city\",\n            children: weather.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wt-temp\",\n            children: [weather.temp, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wt-desc\",\n            children: weather.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"weather-city-form\",\n          onSubmit: handleCitySubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0433\\u043E\\u0440\\u043E\\u0434...\",\n            value: cityInput,\n            onChange: e => setCityInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"OK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), forecast && forecast.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-forecast\",\n          children: forecast.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather-forecast-day\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wf-dayName\",\n              children: new Date(day.date).toLocaleDateString('ru-RU', {\n                weekday: 'short',\n                day: 'numeric',\n                month: 'numeric'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"wf-temps\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"wf-min\",\n                children: [day.min, \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 23\n              }, this), \" - \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"wf-max\",\n                children: [day.max, \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 69\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 21\n            }, this)]\n          }, day.date, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041D\\u0435\\u0442 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u043F\\u043E \\u043F\\u0440\\u043E\\u0433\\u043D\\u043E\\u0437\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(WeatherWidget, \"IiSDy1obGq/oDIzxCadRwUBDsMo=\");\n_c = WeatherWidget;\nexport default WeatherWidget;\nvar _c;\n$RefreshReg$(_c, \"WeatherWidget\");","map":{"version":3,"names":["React","useState","useEffect","IoMdSunny","IoMdCloudy","IoMdRainy","IoMdSnow","IoMdThunderstorm","IoMdPartlySunny","IoMdMoon","WiWindy","jsxDEV","_jsxDEV","Fragment","_Fragment","getWeatherIcon","description","lowerDesc","toLowerCase","includes","isDayTime","weather","sys","sunrise","sunset","tz","timezone","nowUTC","Math","floor","Date","now","localTime","WeatherWidget","theme","_s","setWeather","forecast","setForecast","loading","setLoading","isModalOpen","setIsModalOpen","cityInput","setCityInput","API_KEY","process","env","REACT_APP_OWM_KEY","storedCity","localStorage","getItem","navigator","geolocation","fetchWeatherByCity","getCurrentPosition","position","latitude","longitude","coords","fetchWeatherByCoords","lat","lon","currentRes","fetch","ok","Error","currentData","json","temp","round","main","name","forecastRes","forecastData","processed","processForecastData","list","err","alert","message","cityName","encodeURIComponent","error","dayMap","forEach","item","dateTxt","dt_txt","split","min","max","entries","Object","keys","map","date","sort","a","b","slice","handleWidgetClick","closeModal","handleCitySubmit","e","preventDefault","trim","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","placeholder","value","onChange","target","dayTime","widgetClass","WeatherIcon","length","day","toLocaleDateString","weekday","month","_c","$RefreshReg$"],"sources":["C:/Users/axm/Documents/GitHub/Home-Page/src/components/WeatherWidget.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './WeatherWidget.css';\r\nimport {\r\n  IoMdSunny,\r\n  IoMdCloudy,\r\n  IoMdRainy,\r\n  IoMdSnow,\r\n  IoMdThunderstorm,\r\n  IoMdPartlySunny,\r\n  IoMdMoon\r\n} from 'react-icons/io';\r\nimport { WiWindy } from 'react-icons/wi';\r\n\r\n/**\r\n * Возвращает иконку (для большой иконки) на основе описания погоды.\r\n * Фон теперь решается отдельно (день или ночь).\r\n */\r\nfunction getWeatherIcon(description) {\r\n  if (!description) return IoMdPartlySunny;\r\n  const lowerDesc = description.toLowerCase();\r\n\r\n  if (lowerDesc.includes('clear')) {\r\n    return IoMdSunny;\r\n  }\r\n  if (lowerDesc.includes('cloud')) {\r\n    return IoMdCloudy;\r\n  }\r\n  if (lowerDesc.includes('rain') || lowerDesc.includes('drizzle')) {\r\n    return IoMdRainy;\r\n  }\r\n  if (lowerDesc.includes('snow')) {\r\n    return IoMdSnow;\r\n  }\r\n  if (lowerDesc.includes('thunder')) {\r\n    return IoMdThunderstorm;\r\n  }\r\n  if (lowerDesc.includes('wind') || lowerDesc.includes('breeze')) {\r\n    return WiWindy;\r\n  }\r\n  if (lowerDesc.includes('night') || lowerDesc.includes('moon')) {\r\n    return IoMdMoon;\r\n  }\r\n  return IoMdPartlySunny;\r\n}\r\n\r\n/**\r\n * Определяем, день или ночь, исходя из sys.sunrise / sys.sunset и timezone.\r\n * Возвращаем true, если день, иначе false (ночь).\r\n */\r\nfunction isDayTime(weather) {\r\n  if (!weather || !weather.sys) return true; // fallback\r\n  const { sunrise, sunset } = weather.sys;\r\n  // sunrise, sunset в секундах (UNIX time, UTC)\r\n  // timezone в секундах от UTC (может быть + или -)\r\n  const tz = weather.timezone || 0; // тоже в секундах\r\n  // Текущее UTC-время (в секундах)\r\n  const nowUTC = Math.floor(Date.now() / 1000);\r\n  // Локальное время в городе\r\n  const localTime = nowUTC + tz;\r\n  // Если localTime между sunrise и sunset => день, иначе ночь\r\n  if (sunrise && sunset && sunrise < localTime && localTime < sunset) {\r\n    return true; // день\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction WeatherWidget({ theme }) {\r\n  const [weather, setWeather] = useState(null);\r\n  const [forecast, setForecast] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [cityInput, setCityInput] = useState('');\r\n\r\n  // Вставьте реальный ключ или используйте .env\r\n  const API_KEY = process.env.REACT_APP_OWM_KEY || 'YOUR_OPENWEATHERMAP_API_KEY';\r\n\r\n  useEffect(() => {\r\n    const storedCity = localStorage.getItem('weatherCity') || '';\r\n    setCityInput(storedCity);\r\n\r\n    if (!navigator.geolocation) {\r\n      setLoading(false);\r\n      if (storedCity) {\r\n        fetchWeatherByCity(storedCity);\r\n      }\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        fetchWeatherByCoords(latitude, longitude);\r\n      },\r\n      () => {\r\n        setLoading(false);\r\n        if (storedCity) {\r\n          fetchWeatherByCity(storedCity);\r\n        }\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const fetchWeatherByCoords = async (lat, lon) => {\r\n    try {\r\n      setLoading(true);\r\n      const currentRes = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`\r\n      );\r\n      if (!currentRes.ok) throw new Error('Не удалось получить погоду');\r\n      const currentData = await currentRes.json();\r\n      setWeather({\r\n        temp: Math.round(currentData.main.temp),\r\n        description: currentData.weather[0].description,\r\n        name: currentData.name,\r\n        sys: currentData.sys,    // sunrise, sunset\r\n        timezone: currentData.timezone // смещение\r\n      });\r\n\r\n      const forecastRes = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`\r\n      );\r\n      if (!forecastRes.ok) throw new Error('Не удалось получить прогноз');\r\n      const forecastData = await forecastRes.json();\r\n      const processed = processForecastData(forecastData.list);\r\n      setForecast(processed);\r\n    } catch (err) {\r\n      alert(err.message);\r\n      setWeather(null);\r\n      setForecast([]);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchWeatherByCity = async (cityName) => {\r\n    try {\r\n      setLoading(true);\r\n      const currentRes = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(\r\n          cityName\r\n        )}&units=metric&lang=ru&appid=${API_KEY}`\r\n      );\r\n      if (!currentRes.ok) throw new Error('Город не найден');\r\n      const currentData = await currentRes.json();\r\n      setWeather({\r\n        temp: Math.round(currentData.main.temp),\r\n        description: currentData.weather[0].description,\r\n        name: currentData.name,\r\n        sys: currentData.sys,\r\n        timezone: currentData.timezone\r\n      });\r\n\r\n      const forecastRes = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(\r\n          cityName\r\n        )}&units=metric&lang=ru&appid=${API_KEY}`\r\n      );\r\n      if (!forecastRes.ok) throw new Error('Не удалось получить прогноз');\r\n      const forecastData = await forecastRes.json();\r\n      const processed = processForecastData(forecastData.list);\r\n      setForecast(processed);\r\n    } catch (error) {\r\n      alert(error.message);\r\n      setWeather(null);\r\n      setForecast([]);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const processForecastData = (list) => {\r\n    const dayMap = {};\r\n    list.forEach((item) => {\r\n      const dateTxt = item.dt_txt.split(' ')[0];\r\n      const temp = item.main.temp;\r\n      if (!dayMap[dateTxt]) {\r\n        dayMap[dateTxt] = { min: temp, max: temp };\r\n      } else {\r\n        if (temp < dayMap[dateTxt].min) dayMap[dateTxt].min = temp;\r\n        if (temp > dayMap[dateTxt].max) dayMap[dateTxt].max = temp;\r\n      }\r\n    });\r\n\r\n    const entries = Object.keys(dayMap).map((date) => ({\r\n      date,\r\n      min: Math.round(dayMap[date].min),\r\n      max: Math.round(dayMap[date].max),\r\n    }));\r\n    entries.sort((a, b) => (a.date > b.date ? 1 : -1));\r\n\r\n    return entries.slice(0, 4);\r\n  };\r\n\r\n  const handleWidgetClick = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleCitySubmit = (e) => {\r\n    e.preventDefault();\r\n    if (cityInput.trim()) {\r\n      localStorage.setItem('weatherCity', cityInput.trim());\r\n      fetchWeatherByCity(cityInput.trim());\r\n    }\r\n  };\r\n\r\n  // Если не загрузилось — оставим дефолт\r\n  if (loading) {\r\n    return (\r\n      <div className=\"weather-widget widget default-bg\">\r\n        <p>Загрузка погоды...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!weather) {\r\n    return (\r\n      <>\r\n        <div className=\"weather-widget widget default-bg\" onClick={handleWidgetClick}>\r\n          <p>Погода недоступна</p>\r\n        </div>\r\n        {isModalOpen && (\r\n          <div className={`weather-modal-overlay ${theme === 'dark' ? 'dark-overlay' : ''}`}>\r\n            <div className=\"weather-modal-content\">\r\n              <button className=\"weather-modal-close\" onClick={closeModal}>\r\n                ×\r\n              </button>\r\n              <h2 className=\"weather-modal-title\">ПОГОДА</h2>\r\n              <p>Нет данных</p>\r\n              <form className=\"weather-city-form\" onSubmit={handleCitySubmit}>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Введите город...\"\r\n                  value={cityInput}\r\n                  onChange={(e) => setCityInput(e.target.value)}\r\n                />\r\n                <button type=\"submit\">OK</button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  // Определяем, день или ночь\r\n  const dayTime = isDayTime(weather);  // true => день, false => ночь\r\n\r\n  // Выберем фоновый класс\r\n  const widgetClass = dayTime ? 'sunny-bg' : 'night-bg';\r\n\r\n  // Определяем иконку по описанию\r\n  const WeatherIcon = getWeatherIcon(weather.description);\r\n\r\n  return (\r\n    <>\r\n      {/* Мини-виджет */}\r\n      <div className={`weather-widget widget ${widgetClass}`} onClick={handleWidgetClick}>\r\n        <div className=\"weather-city\">{weather.name}</div>\r\n        <div className=\"weather-temp\">{weather.temp}°C</div>\r\n        <div className=\"weather-big-icon\">\r\n          <WeatherIcon />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Модалка */}\r\n      {isModalOpen && (\r\n        <div\r\n          className={`weather-modal-overlay ${\r\n            theme === 'dark' ? 'dark-overlay' : ''\r\n          }`}\r\n        >\r\n          {/* Используем тот же dayTime => фон */}\r\n          <div className={`weather-modal-content ${dayTime ? 'sunny-bg' : 'night-bg'}`}>\r\n            <button className=\"weather-modal-close\" onClick={closeModal}>\r\n              ×\r\n            </button>\r\n            <h2 className=\"weather-modal-title\">ПОГОДА</h2>\r\n\r\n            <div className=\"weather-today\">\r\n              <div className=\"wt-city\">{weather.name}</div>\r\n              <div className=\"wt-temp\">{weather.temp}°C</div>\r\n              <div className=\"wt-desc\">{weather.description}</div>\r\n            </div>\r\n\r\n            <form className=\"weather-city-form\" onSubmit={handleCitySubmit}>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Введите город...\"\r\n                value={cityInput}\r\n                onChange={(e) => setCityInput(e.target.value)}\r\n              />\r\n              <button type=\"submit\">OK</button>\r\n            </form>\r\n\r\n            <hr />\r\n            {forecast && forecast.length > 0 ? (\r\n              <div className=\"weather-forecast\">\r\n                {forecast.map((day) => (\r\n                  <div key={day.date} className=\"weather-forecast-day\">\r\n                    <div className=\"wf-dayName\">\r\n                      {new Date(day.date).toLocaleDateString('ru-RU', {\r\n                        weekday: 'short',\r\n                        day: 'numeric',\r\n                        month: 'numeric'\r\n                      })}\r\n                    </div>\r\n                    <div className=\"wf-temps\">\r\n                      <span className=\"wf-min\">{day.min}°C</span> - <span className=\"wf-max\">{day.max}°C</span>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <p>Нет данных по прогнозу</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default WeatherWidget;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\axm\\\\Documents\\\\sites\\\\Pet-projects\\\\custom-newtab-extension\\\\src\\\\components\\\\LinkBlock.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './LinkBlock.css';\nimport defaultIcon from '../assets/default-icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LinkBlock({\n  title,\n  url,\n  customIcon,\n  isRemoveMode,\n  onRemove,\n  onEdit\n}) {\n  _s();\n  let domain = '';\n  try {\n    domain = new URL(url).hostname;\n  } catch (error) {}\n\n  // Если пользователь указал customIcon, используем её\n  // Иначе используем Google Favicons\n  const googleIconUrl = `https://www.google.com/s2/favicons?domain=${domain}&sz=128`;\n  const initialIcon = customIcon ? customIcon : googleIconUrl;\n  const [iconSrc, setIconSrc] = useState(initialIcon);\n  const handleImgError = () => {\n    setIconSrc(defaultIcon);\n  };\n\n  // При смене customIcon извне (редактировании) можно отследить изменение пропа:\n  // (Опционально, если хотите, чтобы при редактировании иконка обновлялась без перезагрузки)\n  React.useEffect(() => {\n    if (customIcon) {\n      setIconSrc(customIcon);\n    } else {\n      setIconSrc(googleIconUrl);\n    }\n  }, [customIcon, googleIconUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"link-block-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: url,\n      className: \"link-block\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: iconSrc,\n          alt: \"favicon\",\n          className: \"favicon\",\n          onError: handleImgError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tooltip\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), isRemoveMode && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"remove-block-btn\",\n      onClick: onRemove,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), isRemoveMode && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"edit-block-btn\",\n      onClick: onEdit,\n      children: \"\\u270E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(LinkBlock, \"/NwIWyI6bQ41D586ZpP7ykjg8Rk=\");\n_c = LinkBlock;\nexport default LinkBlock;\nvar _c;\n$RefreshReg$(_c, \"LinkBlock\");","map":{"version":3,"names":["React","useState","defaultIcon","jsxDEV","_jsxDEV","LinkBlock","title","url","customIcon","isRemoveMode","onRemove","onEdit","_s","domain","URL","hostname","error","googleIconUrl","initialIcon","iconSrc","setIconSrc","handleImgError","useEffect","className","children","href","target","rel","src","alt","onError","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/axm/Documents/sites/Pet-projects/custom-newtab-extension/src/components/LinkBlock.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './LinkBlock.css';\r\nimport defaultIcon from '../assets/default-icon.png';\r\n\r\nfunction LinkBlock({ title, url, customIcon, isRemoveMode, onRemove, onEdit }) {\r\n  let domain = '';\r\n  try {\r\n    domain = new URL(url).hostname;\r\n  } catch (error) {}\r\n\r\n  // Если пользователь указал customIcon, используем её\r\n  // Иначе используем Google Favicons\r\n  const googleIconUrl = `https://www.google.com/s2/favicons?domain=${domain}&sz=128`;\r\n  const initialIcon = customIcon ? customIcon : googleIconUrl;\r\n\r\n  const [iconSrc, setIconSrc] = useState(initialIcon);\r\n\r\n  const handleImgError = () => {\r\n    setIconSrc(defaultIcon);\r\n  };\r\n\r\n  // При смене customIcon извне (редактировании) можно отследить изменение пропа:\r\n  // (Опционально, если хотите, чтобы при редактировании иконка обновлялась без перезагрузки)\r\n  React.useEffect(() => {\r\n    if (customIcon) {\r\n      setIconSrc(customIcon);\r\n    } else {\r\n      setIconSrc(googleIconUrl);\r\n    }\r\n  }, [customIcon, googleIconUrl]);\r\n\r\n  return (\r\n    <div className=\"link-block-wrapper\">\r\n      <a\r\n        href={url}\r\n        className=\"link-block\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <div className=\"icon-wrapper\">\r\n          <img\r\n            src={iconSrc}\r\n            alt=\"favicon\"\r\n            className=\"favicon\"\r\n            onError={handleImgError}\r\n          />\r\n        </div>\r\n        <div className=\"tooltip\">{title}</div>\r\n      </a>\r\n\r\n      {/* Кнопка удаления (справа сверху), если isRemoveMode = true */}\r\n      {isRemoveMode && (\r\n        <button className=\"remove-block-btn\" onClick={onRemove}>\r\n          -\r\n        </button>\r\n      )}\r\n\r\n      {/* Кнопка редактирования (слева сверху), тоже появляется при isRemoveMode */}\r\n      {isRemoveMode && (\r\n        <button className=\"edit-block-btn\" onClick={onEdit}>\r\n          ✎\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LinkBlock;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,iBAAiB;AACxB,OAAOC,WAAW,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,SAASA,CAAC;EAAEC,KAAK;EAAEC,GAAG;EAAEC,UAAU;EAAEC,YAAY;EAAEC,QAAQ;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC7E,IAAIC,MAAM,GAAG,EAAE;EACf,IAAI;IACFA,MAAM,GAAG,IAAIC,GAAG,CAACP,GAAG,CAAC,CAACQ,QAAQ;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE,CAAC;;EAEjB;EACA;EACA,MAAMC,aAAa,GAAG,6CAA6CJ,MAAM,SAAS;EAClF,MAAMK,WAAW,GAAGV,UAAU,GAAGA,UAAU,GAAGS,aAAa;EAE3D,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAACiB,WAAW,CAAC;EAEnD,MAAMG,cAAc,GAAGA,CAAA,KAAM;IAC3BD,UAAU,CAAClB,WAAW,CAAC;EACzB,CAAC;;EAED;EACA;EACAF,KAAK,CAACsB,SAAS,CAAC,MAAM;IACpB,IAAId,UAAU,EAAE;MACdY,UAAU,CAACZ,UAAU,CAAC;IACxB,CAAC,MAAM;MACLY,UAAU,CAACH,aAAa,CAAC;IAC3B;EACF,CAAC,EAAE,CAACT,UAAU,EAAES,aAAa,CAAC,CAAC;EAE/B,oBACEb,OAAA;IAAKmB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjCpB,OAAA;MACEqB,IAAI,EAAElB,GAAI;MACVgB,SAAS,EAAC,YAAY;MACtBG,MAAM,EAAC,QAAQ;MACfC,GAAG,EAAC,qBAAqB;MAAAH,QAAA,gBAEzBpB,OAAA;QAAKmB,SAAS,EAAC,cAAc;QAAAC,QAAA,eAC3BpB,OAAA;UACEwB,GAAG,EAAET,OAAQ;UACbU,GAAG,EAAC,SAAS;UACbN,SAAS,EAAC,SAAS;UACnBO,OAAO,EAAET;QAAe;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN9B,OAAA;QAAKmB,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAElB;MAAK;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EAGHzB,YAAY,iBACXL,OAAA;MAAQmB,SAAS,EAAC,kBAAkB;MAACY,OAAO,EAAEzB,QAAS;MAAAc,QAAA,EAAC;IAExD;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT,EAGAzB,YAAY,iBACXL,OAAA;MAAQmB,SAAS,EAAC,gBAAgB;MAACY,OAAO,EAAExB,MAAO;MAAAa,QAAA,EAAC;IAEpD;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACtB,EAAA,CA7DQP,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AA+DlB,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}